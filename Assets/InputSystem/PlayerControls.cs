//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gaming"",
            ""id"": ""4ef82ed1-2838-41c8-be57-7bb1def4c058"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""ae8143b5-c1a0-4ffc-871c-05d06b786271"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""69e83010-c012-4c60-a219-84fdd621c14a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""877013c0-49f3-4af7-a281-c866f9a27da1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch0Position"",
                    ""type"": ""Value"",
                    ""id"": ""450cf964-4cc4-43e5-8e82-05707618ff30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""Value"",
                    ""id"": ""639a50b8-3b70-42fd-8d0e-3ccaaa69f44d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch0Contact"",
                    ""type"": ""Button"",
                    ""id"": ""109b53c1-9731-4a13-be2f-879007dfd254"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch1Contact"",
                    ""type"": ""Button"",
                    ""id"": ""0c06046c-5b62-4c57-b112-4ce3bd78db1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f24e72cd-ac3a-481f-ae70-205fa69f9bb2"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0975bff-5f53-4c01-85c7-5574e8bbd7d9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea54eb74-d047-412e-9a13-74cd2537cec1"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7906715-8b2c-48ac-a2d9-7bb23fd99d43"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d7a45de-92f4-43a0-af41-09219b59542f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2f22c0a-54d2-40a6-8d2c-9b64280a92ea"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f5d9e6d-8f10-426a-9b98-c3854b62eb86"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7189f4cf-60e2-4eac-b2d8-09e8c100b930"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch1Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bdd89d1-c1e9-47ab-8de3-0abda53299c2"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gaming
        m_Gaming = asset.FindActionMap("Gaming", throwIfNotFound: true);
        m_Gaming_Press = m_Gaming.FindAction("Press", throwIfNotFound: true);
        m_Gaming_Position = m_Gaming.FindAction("Position", throwIfNotFound: true);
        m_Gaming_Zoom = m_Gaming.FindAction("Zoom", throwIfNotFound: true);
        m_Gaming_Touch0Position = m_Gaming.FindAction("Touch0Position", throwIfNotFound: true);
        m_Gaming_Touch1Position = m_Gaming.FindAction("Touch1Position", throwIfNotFound: true);
        m_Gaming_Touch0Contact = m_Gaming.FindAction("Touch0Contact", throwIfNotFound: true);
        m_Gaming_Touch1Contact = m_Gaming.FindAction("Touch1Contact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gaming
    private readonly InputActionMap m_Gaming;
    private List<IGamingActions> m_GamingActionsCallbackInterfaces = new List<IGamingActions>();
    private readonly InputAction m_Gaming_Press;
    private readonly InputAction m_Gaming_Position;
    private readonly InputAction m_Gaming_Zoom;
    private readonly InputAction m_Gaming_Touch0Position;
    private readonly InputAction m_Gaming_Touch1Position;
    private readonly InputAction m_Gaming_Touch0Contact;
    private readonly InputAction m_Gaming_Touch1Contact;
    public struct GamingActions
    {
        private @PlayerControls m_Wrapper;
        public GamingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Gaming_Press;
        public InputAction @Position => m_Wrapper.m_Gaming_Position;
        public InputAction @Zoom => m_Wrapper.m_Gaming_Zoom;
        public InputAction @Touch0Position => m_Wrapper.m_Gaming_Touch0Position;
        public InputAction @Touch1Position => m_Wrapper.m_Gaming_Touch1Position;
        public InputAction @Touch0Contact => m_Wrapper.m_Gaming_Touch0Contact;
        public InputAction @Touch1Contact => m_Wrapper.m_Gaming_Touch1Contact;
        public InputActionMap Get() { return m_Wrapper.m_Gaming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamingActions set) { return set.Get(); }
        public void AddCallbacks(IGamingActions instance)
        {
            if (instance == null || m_Wrapper.m_GamingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamingActionsCallbackInterfaces.Add(instance);
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Touch0Position.started += instance.OnTouch0Position;
            @Touch0Position.performed += instance.OnTouch0Position;
            @Touch0Position.canceled += instance.OnTouch0Position;
            @Touch1Position.started += instance.OnTouch1Position;
            @Touch1Position.performed += instance.OnTouch1Position;
            @Touch1Position.canceled += instance.OnTouch1Position;
            @Touch0Contact.started += instance.OnTouch0Contact;
            @Touch0Contact.performed += instance.OnTouch0Contact;
            @Touch0Contact.canceled += instance.OnTouch0Contact;
            @Touch1Contact.started += instance.OnTouch1Contact;
            @Touch1Contact.performed += instance.OnTouch1Contact;
            @Touch1Contact.canceled += instance.OnTouch1Contact;
        }

        private void UnregisterCallbacks(IGamingActions instance)
        {
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Touch0Position.started -= instance.OnTouch0Position;
            @Touch0Position.performed -= instance.OnTouch0Position;
            @Touch0Position.canceled -= instance.OnTouch0Position;
            @Touch1Position.started -= instance.OnTouch1Position;
            @Touch1Position.performed -= instance.OnTouch1Position;
            @Touch1Position.canceled -= instance.OnTouch1Position;
            @Touch0Contact.started -= instance.OnTouch0Contact;
            @Touch0Contact.performed -= instance.OnTouch0Contact;
            @Touch0Contact.canceled -= instance.OnTouch0Contact;
            @Touch1Contact.started -= instance.OnTouch1Contact;
            @Touch1Contact.performed -= instance.OnTouch1Contact;
            @Touch1Contact.canceled -= instance.OnTouch1Contact;
        }

        public void RemoveCallbacks(IGamingActions instance)
        {
            if (m_Wrapper.m_GamingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamingActions instance)
        {
            foreach (var item in m_Wrapper.m_GamingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamingActions @Gaming => new GamingActions(this);
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IGamingActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnTouch0Position(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch0Contact(InputAction.CallbackContext context);
        void OnTouch1Contact(InputAction.CallbackContext context);
    }
}
